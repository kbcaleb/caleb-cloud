<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.9.4" created="2018-03-08 16:45" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>ccollins</title>
	<link>http://127.0.0.1</link>
	<description>ccollins</description>
	<pubDate>Thu, 08 Mar 2018 16:45:29 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://127.0.0.1</wp:base_site_url>
	<wp:base_blog_url>http://127.0.0.1</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[kbcaleb]]></wp:author_login><wp:author_email><![CDATA[kbcaleb@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[kbcaleb]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>


	<generator>https://wordpress.org/?v=4.9.4</generator>

	<item>
		<title>Non-static method PMA_Config::isHttps() should not be called statically</title>
		<link>http://127.0.0.1/index.php/2007/01/20/non-static-method-pma_configishttps-should-not-be-called-statically/</link>
		<pubDate>Sat, 20 Jan 2007 18:01:12 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=121</guid>
		<description></description>
		<content:encoded><![CDATA[This looks worse then it really is in plesk. The password in the PSA DB does not match the one set for the user in mysql.user. Just reset the password in the control panel for that DB user to correct it.
<pre><code class="lang-markup">
Non-static method PMA_Config::isHttps() should not be called statically
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date><![CDATA[2007-01-20 11:01:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-01-20 18:01:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[non-static-method-pma_configishttps-should-not-be-called-statically]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rewrite Non-SSL to SSL</title>
		<link>http://127.0.0.1/index.php/2007/10/08/rewrite-non-ssl-to-ssl/</link>
		<pubDate>Mon, 08 Oct 2007 17:03:51 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=124</guid>
		<description></description>
		<content:encoded><![CDATA[Simple rewrite rule to send all HTTP requests for any URL to a HTTPS connection.
<pre><code class="lang-apache">RewriteEngine on
RewriteCond %{SERVER_PORT} =80
RewriteRule ^(.*) https://%{SERVER_NAME}%{REQUEST_URI}</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>124</wp:post_id>
		<wp:post_date><![CDATA[2007-10-08 11:03:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-08 17:03:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[rewrite-non-ssl-to-ssl]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Change a MySQL database charset</title>
		<link>http://127.0.0.1/index.php/2007/10/05/change-a-mysql-database-charset/</link>
		<pubDate>Fri, 05 Oct 2007 17:08:00 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=128</guid>
		<description></description>
		<content:encoded><![CDATA[Sometime you may need to change your database to use a different charset. Just issue the following from a MySQL prompt.
<pre><code class="lang-sql">ALTER DATABASE dbname CHARSET utf8;</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>128</wp:post_id>
		<wp:post_date><![CDATA[2007-10-05 11:08:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-05 17:08:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[change-a-mysql-database-charset]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MySQL unauthenticated user</title>
		<link>http://127.0.0.1/index.php/2007/10/09/mysql-unauthenticated-user/</link>
		<pubDate>Tue, 09 Oct 2007 17:08:32 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=130</guid>
		<description></description>
		<content:encoded><![CDATA[Often time you will see stacked MySQL queries with the listing of "unauthenticated user". This is a known bug in MySQL right now where it cannot perform a valid reverse DNS lookup. This will cause the queries to stack and hang sometimes. If you need to get by this bug you can disable DNS lookups which will also help performance. Just add the following to your /etc/my.cnf file.
<pre><code class="lang-sql">skip-name-resolve</code></pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>130</wp:post_id>
		<wp:post_date><![CDATA[2007-10-09 11:08:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-09 17:08:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql-unauthenticated-user]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Change MySQL open file limit</title>
		<link>http://127.0.0.1/index.php/2007/10/10/change-mysql-open-file-limit/</link>
		<pubDate>Wed, 10 Oct 2007 17:09:11 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=132</guid>
		<description></description>
		<content:encoded><![CDATA[This one used to get new techs because they would see the error message and think the file limit error was pertaining to the kernel and not MySQL. You can add the following to the /etc/my.cnf to change the value.
<pre><code class="lang-sql">open_file_limit=1400</code></pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>132</wp:post_id>
		<wp:post_date><![CDATA[2007-10-10 11:09:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-10 17:09:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[change-mysql-open-file-limit]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Check for DoS or DDoS connections</title>
		<link>http://127.0.0.1/index.php/2007/10/12/check-for-dos-or-ddos-connections/</link>
		<pubDate>Fri, 12 Oct 2007 17:09:38 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=134</guid>
		<description></description>
		<content:encoded><![CDATA[This is just a quick snippet to see what is going on with connection on your server. We are checking port 80 in this example but you can replace 80 with whatever port you are checking.
<pre><code class="lang-bash">netstat -ant | grep \:80 | awk '{ print $5 }' | awk -F \: '{ print $1 }' | sort | uniq -c | sort -n</code></pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>134</wp:post_id>
		<wp:post_date><![CDATA[2007-10-12 11:09:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-12 17:09:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[check-for-dos-or-ddos-connections]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Create a simple MySQL index</title>
		<link>http://127.0.0.1/index.php/2007/10/12/create-a-simple-mysql-index/</link>
		<pubDate>Fri, 12 Oct 2007 17:10:04 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=136</guid>
		<description></description>
		<content:encoded><![CDATA[Here is how you can create a MySQL index. Be aware of where you are using indexes they can be just as beneficial as they can be disastrous to performance.
<pre><code class="lang-sql">ALTER TABLE table_name ADD INDEX index_name (field1, field2);</code></pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date><![CDATA[2007-10-12 11:10:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-12 17:10:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[create-a-simple-mysql-index]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Add additional IP addresses to FreeBSD</title>
		<link>http://127.0.0.1/index.php/2007/10/13/add-additional-ip-addresses-to-freebsd/</link>
		<pubDate>Sat, 13 Oct 2007 17:10:26 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=138</guid>
		<description></description>
		<content:encoded><![CDATA[Here is how you setup a IP alias in FreeBSD. Add the following to your rc.conf file.
<pre><code class="lang-bash">ifconfig_rl0_alias0="192.168.0.57 netmask 255.255.255.255"</code></pre> 
Now here is the command you can use to bring that interface online instantly.
<pre><code class="lang-bash">ifconfig rl0 alias 192.168.0.57 netmask 255.255.255.255</code></pre> 
With BSD you use 255.255.255.255 for you IP alias netmasks.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>138</wp:post_id>
		<wp:post_date><![CDATA[2007-10-13 11:10:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-13 17:10:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[add-additional-ip-addresses-to-freebsd]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Redirect ports with IPtables</title>
		<link>http://127.0.0.1/index.php/2007/10/13/redirect-ports-with-iptables/</link>
		<pubDate>Sat, 13 Oct 2007 17:10:51 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=140</guid>
		<description></description>
		<content:encoded><![CDATA[For whatever reason you may want to remap a high port to a low port. Here is how you can do it with IPtables. In this example we are going to remap 23420 to port 25 on IP address 192.168.1.1.
<pre><code class="lang-bash">iptables -t nat -A PREROUTING -p tcp --dport 23420 -j DNAT --to 192.168.1.1:25</code></pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>140</wp:post_id>
		<wp:post_date><![CDATA[2007-10-13 11:10:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-13 17:10:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[redirect-ports-with-iptables]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Change the TTL for a domain in plesk</title>
		<link>http://127.0.0.1/index.php/2007/10/13/change-the-ttl-for-a-domain-in-plesk/</link>
		<pubDate>Sat, 13 Oct 2007 17:11:19 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=142</guid>
		<description></description>
		<content:encoded><![CDATA[To lower the TTL for a domain in Plesk simply go to the domain or server section and choose DNS. Next choose the SOA icon and from there you can lower the TTL value for a domain.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>142</wp:post_id>
		<wp:post_date><![CDATA[2007-10-13 11:11:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-13 17:11:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[change-the-ttl-for-a-domain-in-plesk]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Import a plain CSV file into MySQL</title>
		<link>http://127.0.0.1/index.php/2007/10/14/import-a-plain-csv-file-into-mysql/</link>
		<pubDate>Sun, 14 Oct 2007 17:11:44 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=144</guid>
		<description></description>
		<content:encoded><![CDATA[This assumes you have already created the required table with all of the correct fields. Also this assumes you are using , as the field separator.
<pre><code class="lang-sql">LOAD DATA INFILE 'filename.txt' INTO table_name FIELDS TERMINATED BY ',';</code></pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>144</wp:post_id>
		<wp:post_date><![CDATA[2007-10-14 11:11:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-14 17:11:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[import-a-plain-csv-file-into-mysql]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Show all catchall email addresses in Plesk</title>
		<link>http://127.0.0.1/index.php/2007/10/19/show-all-catchall-email-addresses-in-plesk/</link>
		<pubDate>Fri, 19 Oct 2007 17:12:09 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=146</guid>
		<description></description>
		<content:encoded><![CDATA[These need to be monitored because all to often domains with these catch alls are used as SPAM reply to addresses in email.
<pre><code class="lang-sql">select d.name as domain, p.value as catchall_address from Parameters p, DomainServices ds, domains d where d.id = ds.dom_id and ds.parameters_id = p.id and p.parameter = 'catch_addr' order by d.name;</code></pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>146</wp:post_id>
		<wp:post_date><![CDATA[2007-10-19 11:12:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-19 17:12:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[show-all-catchall-email-addresses-in-plesk]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Check for weak passwords in Plesk mail accounts</title>
		<link>http://127.0.0.1/index.php/2007/10/19/check-for-weak-passwords-in-plesk-mail-accounts/</link>
		<pubDate>Fri, 19 Oct 2007 17:12:34 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=148</guid>
		<description></description>
		<content:encoded><![CDATA[You can change the password string to some of the more known ones such as 12345, password123, pass123, god, etc..
<pre><code class="lang-sql">select domains.name,domains.id,mail.mail_name,accounts.password from domains,mail,accounts where domains.id=mail.dom_id and accounts.id=mail.account_id and accounts.password='password';</code></pre> 
And here is the list all for the passwords.
<pre><code class="lang-sql">select CONCAT(mail_name,"@",name) as email_address,accounts.password from mail left join domains on domains.id=mail.dom_id left join accounts on accounts.id=mail.account_id;</code></pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>148</wp:post_id>
		<wp:post_date><![CDATA[2007-10-19 11:12:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-19 17:12:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[check-for-weak-passwords-in-plesk-mail-accounts]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Premature end of script headers in CGI</title>
		<link>http://127.0.0.1/index.php/2007/10/29/premature-end-of-script-headers-in-cgi/</link>
		<pubDate>Mon, 29 Oct 2007 17:12:57 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=150</guid>
		<description></description>
		<content:encoded><![CDATA[This is old but still comes up sometimes. Make sure the script is 755 and the file is in the correct format.
First verify the file is not in binary.
<pre><code class="lang-bash">vi -b filename</code></pre> 
With plesk with suexec you need to set the uid:gid to the userID for the domain and the psacln group.
<pre><code class="lang-bash">chown userid:psacln file.cgi</code></pre> 
Now one last think you can do is check the syntax of the file
<pre><code class="lang-bash">perl -c file.cgi</code></pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>150</wp:post_id>
		<wp:post_date><![CDATA[2007-10-29 11:12:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-29 17:12:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[premature-end-of-script-headers-in-cgi]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Change a MySQL MyISAM table to a InnoDB engine</title>
		<link>http://127.0.0.1/index.php/2007/10/30/change-a-mysql-myisam-table-to-a-innodb-engine/</link>
		<pubDate>Tue, 30 Oct 2007 17:13:24 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=152</guid>
		<description></description>
		<content:encoded><![CDATA[This is easy on smaller tables but on larger ones all data should be backed up first to CYA and changes should be done during off hours to avoid downtime.
<pre><code class="lang-sql">ALTER TABLE 'table_name' ENGINE='InnoDB';</code></pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>152</wp:post_id>
		<wp:post_date><![CDATA[2007-10-30 11:13:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-10-30 17:13:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[change-a-mysql-myisam-table-to-a-innodb-engine]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Report current disk usage</title>
		<link>http://127.0.0.1/index.php/2007/11/10/report-current-disk-usage/</link>
		<pubDate>Sat, 10 Nov 2007 18:13:52 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=154</guid>
		<description></description>
		<content:encoded><![CDATA[This is good for trying to chase down which directories are eating up the most space and give you a file with the report sorted by size in MB.
<pre><code class="lang-bash">( du -SB 1M / | sort -grk 1 ) &gt; disk_usage.txt 2&gt; /dev/null</code></pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>154</wp:post_id>
		<wp:post_date><![CDATA[2007-11-10 11:13:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-11-10 18:13:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[report-current-disk-usage]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Kill all processes for a user</title>
		<link>http://127.0.0.1/index.php/2007/11/12/kill-all-processes-for-a-user/</link>
		<pubDate>Mon, 12 Nov 2007 18:14:16 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=156</guid>
		<description></description>
		<content:encoded><![CDATA[Sometimes you need to kill off any running processes do you can remove a exploited account. Here is a simple quick way.

Using pkill
<pre><code class="lang-bash">pkill -u username</code></pre> 
And if you do not have pkill you could just do
<pre><code class="lang-bash">ps -o pid -u username | xargs kill -1</code></pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>156</wp:post_id>
		<wp:post_date><![CDATA[2007-11-12 11:14:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-11-12 18:14:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[kill-all-processes-for-a-user]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Reset mailman users password for Plesk</title>
		<link>http://127.0.0.1/index.php/2007/11/20/reset-mailman-users-password-for-plesk/</link>
		<pubDate>Tue, 20 Nov 2007 18:15:14 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=160</guid>
		<description></description>
		<content:encoded><![CDATA[User --help to find any additional options you may be wandering about.
<pre><code class="lang-bash">/usr/lib/mailman/bin/change_pw --listname=listname --password=newpass</code></pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>160</wp:post_id>
		<wp:post_date><![CDATA[2007-11-20 11:15:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-11-20 18:15:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[reset-mailman-users-password-for-plesk]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Use Xcache 1.21 with Zend Optimizer 3.3.0</title>
		<link>http://127.0.0.1/index.php/2007/11/25/use-xcache-1-21-with-zend-optimizer-3-3-0/</link>
		<pubDate>Sun, 25 Nov 2007 18:25:35 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=198</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2007/11/zend_logo.png"><img src="http://ccollins.net/wp-content/uploads/2007/11/zend_logo-150x150.png" alt="zend" width="150" height="150" class="alignleft size-thumbnail wp-image-391" /></a>The error you get when trying to make this work can be quite deceiving but the real issue is the same that you get in FreeBSD where the module load order can cause problems.
PHP Fatal error: [Zend Optimizer] Zend Optimizer 3.3.0 is incompatible with XCache 1.2.1 in Unknown on line 0
I corrected this by changing the default order of the way Zend loads and loading xcache as a zend_extension.
<pre><code class="lang-bash">[Zend]
zend_extension = /usr/lib/php4/xcache.so
misc xcache flags in between
zend_extension=/usr/local/Zend/lib/ZendExtensionManager.so
zend_extension_ts=/usr/local/Zend/lib/ZendExtensionManager_TS.so
zend_extension_manager.optimizer=/usr/local/Zend/lib/Optimizer-3.3.0
zend_extension_manager.optimizer_ts=/usr/local/Zend/lib/Optimizer_TS-3.3.0
zend_optimizer.version=3.3.0a</code></pre> 
And here is the final result with no more SEGFAULTS
<pre><code class="lang-bash">php -v
PHP 4.4.7 (cli) (built: May 4 2007 11:42:28)
Copyright (c) 1997-2007 The PHP Group
Zend Engine v1.3.0, Copyright (c) 1998-2004 Zend Technologies
with XCache v1.2.1, Copyright (c) 2005-2007, by mOo
with the ionCube PHP Loader v3.1.22, Copyright (c) 2002-2006, by ionCube Ltd., and
with Zend Extension Manager v1.2.2, Copyright (c) 2003-2007, by Zend Technologies
with Zend Optimizer v3.3.0, Copyright (c) 1998-2007, by Zend Technologies</code></pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>198</wp:post_id>
		<wp:post_date><![CDATA[2007-11-25 11:25:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-11-25 18:25:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[use-xcache-1-21-with-zend-optimizer-3-3-0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Deny certain browsers access to a module</title>
		<link>http://127.0.0.1/index.php/2007/11/21/deny-certain-browsers-access-to-a-module/</link>
		<pubDate>Wed, 21 Nov 2007 18:26:01 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=200</guid>
		<description></description>
		<content:encoded><![CDATA[Add the following to your httpd.conf for VirtualHost.
<pre><code class="lang-apache">BrowserMatch "^Browser/ver#" no-modulename</code></pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>200</wp:post_id>
		<wp:post_date><![CDATA[2007-11-21 11:26:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-11-21 18:26:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[deny-certain-browsers-access-to-a-module]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Test CPU</title>
		<link>http://127.0.0.1/index.php/2008/09/15/test-cpu/</link>
		<pubDate>Mon, 15 Sep 2008 17:15:41 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=162</guid>
		<description></description>
		<content:encoded><![CDATA[[caption id="attachment_369" align="alignleft" width="150"]<a href="http://ccollins.net/wp-content/uploads/2008/09/cpu.jpg"><img src="http://ccollins.net/wp-content/uploads/2008/09/cpu-150x150.jpg" alt="3d illustration of cpu chip over white background" width="150" height="150" class="size-thumbnail wp-image-369" /></a> 3d illustration of cpu chip over white background[/caption]This is the quickest way to do a quick CPU test. Just download the latest kernel source and run
<pre><code class="lang-bash">make oldmenuconfig</code></pre> 

Just hit enter for all then make a shell script like this.
<pre><code class="lang-bash">#!/bin/bash
make dep
while [ "foo" = "foo" ]
do
	make clean
	make -j2 bzImage
	if [ $? -ne 0 ]
	then
		echo OUCH OUCH OUCH OUCH
		exit 1
	fi
done</code></pre> 

Just replace -j2 with -j and the +1 of the number of CPUs on the system.
Example:
<pre><code class="lang-bash">Dual Core = -j3
Single = -j2</code></pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>162</wp:post_id>
		<wp:post_date><![CDATA[2008-09-15 11:15:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-09-15 17:15:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[test-cpu]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>vsftpd with SSL</title>
		<link>http://127.0.0.1/index.php/2008/09/12/vsftpd-with-ssl/</link>
		<pubDate>Fri, 12 Sep 2008 17:16:10 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=164</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2011/11/ssl.png"><img src="http://ccollins.net/wp-content/uploads/2011/11/ssl-150x150.png" alt="ssl" width="150" height="150" class="alignleft size-thumbnail wp-image-345" /></a>First lets generate the PEM file.
<pre><code class="lang-bash">openssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout /etc/vsftpd/vsftpd.pem -out /etc/vsftpd/vsftpd.pem</code></pre>

Now lets add the required entries to the /etc/vsftpd.conf file
<pre><code class="lang-bash">
ssl_enable=YES
allow_anon_ssl=NO
force_local_data_ssl=NO
force_local_logins_ssl=NO
ssl_tlsv1=YES
ssl_sslv2=NO
ssl_sslv3=NO
rsa_cert_file=/etc/vsftpd/vsftpd.pem
</code></pre>

Restart the service and test with <a href="http://fireftp.mozdev.org/">FireFTP</a>
<pre><code class="lang-bash">
/etc/rc.d/init.d/vsftpd restart
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>164</wp:post_id>
		<wp:post_date><![CDATA[2008-09-12 11:16:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-09-12 17:16:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[vsftpd-with-ssl]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Check SSL expiration date</title>
		<link>http://127.0.0.1/index.php/2008/05/22/check-ssl-expiration-date/</link>
		<pubDate>Thu, 22 May 2008 17:16:40 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=166</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2011/11/ssl.png"><img src="http://ccollins.net/wp-content/uploads/2011/11/ssl-150x150.png" alt="ssl" width="150" height="150" class="alignleft size-thumbnail wp-image-345" /></a>Nifty little script for doing a simple SSL verify
<a href="http://security.techie-blogs.com/content/openssl_cert_expiry_check.txt">OpenSSL Verify</a>
<pre><code class="lang-bash">#!/bin/bash
[ $# -ne 1 ] &amp;&amp; {
printf "%s: site:port\n" $0;
printf "Usage: %s www.example.com.au:443\n" $0;
exit 0
}
echo -n "$1 - "
echo "
GET / HTTP/1.0
EOT
" | openssl s_client -connect $1 2&gt;&amp;1 | \
sed -n '/-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/p' | \
openssl x509 -enddate | \
awk -F= ' /notAfter/ { printf("Expires: %s\n",$NF); } '
exit 0</code></pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>166</wp:post_id>
		<wp:post_date><![CDATA[2008-05-22 11:16:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-05-22 17:16:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[check-ssl-expiration-date]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Make a FreeBSD 7.0 DVD</title>
		<link>http://127.0.0.1/index.php/2008/05/08/make-a-freebsd-7-0-dvd/</link>
		<pubDate>Thu, 08 May 2008 17:17:06 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=168</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2008/05/freebsd.png"><img src="http://ccollins.net/wp-content/uploads/2008/05/freebsd-150x150.png" alt="freebsd" width="150" height="150" class="alignleft size-thumbnail wp-image-373" /></a>The goal here is to make 1 single DVD out of the 3 FreeBSD 7.0  installation CD’s. First we need to fetch all 3 of the ISO’s. For this  example I am pulling the i386 version.
<pre><code class="lang-bash">wget ftp://ftp.freebsd.org/pub/FreeBSD/releases/i386/ISO-IMAGES/7.0/7.0-RELEASE-i386-disc1.iso
wget ftp://ftp.freebsd.org/pub/FreeBSD/releases/i386/ISO-IMAGES/7.0/7.0-RELEASE-i386-disc2.iso
wget ftp://ftp.freebsd.org/pub/FreeBSD/releases/i386/ISO-IMAGES/7.0/7.0-RELEASE-i386-disc3.iso</code></pre> 

Now lets mount them each as a loopback and then get the contents.
<pre><code class="lang-bash">mount -t iso9660 -o loop /path/to/7.0-RELEASE-i386-disc3.iso /mnt
mkdir ~/FreeBSD-DVD-7.0 &amp;&amp; cd ~/FreeBSD-DVD-7.0
tar -C /mnt -cf - . |tar -xf -
umount /mnt
mount -t iso9660 -o loop /path/to/7.0-RELEASE-i386-disc2.iso /mnt
tar -C /mnt -cf - . |tar -xf -
umount /mnt
mount -t iso9660 -o loop /path/to/7.0-RELEASE-i386-disc1.iso /mnt
tar -C /mnt -cf - . |tar -xf -
umount /mnt
cat cdrom.inf
CD_VERSION = 6.1-RC1
CD_VOLUME = 1
cd packages
cat INDEX | sed -e "s/|2/|1/g" -e "s/|3/|1/g" &gt; NEWINDEX
mv NEWINDEX INDEX
growisofs -Z /dev/cd0 -speed 16 -J -R -no-emul-boot -b boot/cdboot -iso-level 3 temp</code></pre> 

The last bit here on the INDEX file is to remove reference to CD’s 2&amp;3 so it will use the 1 DVD for all packages.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>168</wp:post_id>
		<wp:post_date><![CDATA[2008-05-08 11:17:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-05-08 17:17:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[make-a-freebsd-7-0-dvd]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Subversion Berkeley DB error while opening environment for filesystem</title>
		<link>http://127.0.0.1/index.php/2008/04/13/subversion-berkeley-db-error-while-opening-environment-for-filesystem/</link>
		<pubDate>Sun, 13 Apr 2008 17:17:34 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=170</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2008/04/Oracle-DB.png"><img src="http://ccollins.net/wp-content/uploads/2008/04/Oracle-DB.png" alt="Oracle DB" width="128" height="128" class="alignleft size-full wp-image-375" /></a>This seems to be caused by versions before 1.4.3 because of the  difference in the set fstype for create. To correct this problem you  need to specify the correct fstype when making the svn repo.
<pre><code class="lang-bash">svnadmin create /path/to/svn/repo --fs-type fsfs</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>170</wp:post_id>
		<wp:post_date><![CDATA[2008-04-13 11:17:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-04-13 17:17:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[subversion-berkeley-db-error-while-opening-environment-for-filesystem]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ntpdate – no server suitable for synchronization</title>
		<link>http://127.0.0.1/index.php/2008/03/09/ntpdate-no-server-suitable-for-synchronization/</link>
		<pubDate>Sun, 09 Mar 2008 17:18:01 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=172</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2014/08/pinguinalulu_tux_the_batman_penguin_11703.png"><img src="http://ccollins.net/wp-content/uploads/2014/08/pinguinalulu_tux_the_batman_penguin_11703-150x150.png" alt="linux" width="150" height="150" class="alignleft size-thumbnail wp-image-334" /></a>This is caused by the ntpdate binary not being able to pass data back  because of a firewall or something similar. You can either update the  FW rules or use the -u flag for unprivileged ports.
<pre><code class="lang-bash">ntpdate -u ntp.server.com</code></pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>172</wp:post_id>
		<wp:post_date><![CDATA[2008-03-09 11:18:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-03-09 17:18:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ntpdate-no-server-suitable-for-synchronization]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Log vsftpd to MySQL</title>
		<link>http://127.0.0.1/index.php/2008/02/13/log-vsftpd-to-mysql/</link>
		<pubDate>Wed, 13 Feb 2008 18:18:43 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=174</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2008/02/mysql.png"><img src="http://ccollins.net/wp-content/uploads/2008/02/mysql-150x150.png" alt="mysql" width="150" height="150" class="alignleft size-thumbnail wp-image-378" /></a>First lets build the pam_mysql package. There is more then one way to do this I just decided to use a SRC RPM I found for FC9.
<pre><code class="lang-bash">wget http://rpm.pbone.net/index.php3/stat/3/srodzaj/2/search/pam_mysql-0.7-0.1.rc1.fc9.src.rpm
rpm -ivh pam_mysql-0.7-0.1.rc1.fc9.src.rpm
rpmbuild -bb /usr/src/redhat/SPECS/pam_mysql.spec
rpm -ivh /usr/src/redhat/RPMS/i386/pam*.rpm</code></pre> 

Now that we have the pam module installed lets enable it for VsFTPd by creating the required user and conf file
<pre><code class="lang-bash">useradd -d /home/vsftpd -g nobody -m -s /bin/false vsftpd
cp /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf.orig</code></pre> 

Now I just use the following in my vsftpd.conf file you can add more but this is the minimum you will need to make it work.
<pre><code class="lang-bash">listen=YES
anonymous_enable=NO
local_enable=YES
write_enable=YES
local_umask=022
dirmessage_enable=YES
xferlog_enable=YES
connect_from_port_20=YES
nopriv_user=vsftpd
chroot_local_user=YES
secure_chroot_dir=/var/run/vsftpd
pam_service_name=vsftpd
guest_enable=YES
guest_username=vsftpd
local_root=/home/vsftpd/$USER
user_sub_token=$USER
virtual_use_local_privs=YES</code></pre> 

Now lets correct pam authentication
<pre><code class="lang-bash">cp /etc/pam.d/vsftpd /etc/pam.d/vsftpd.orig</code></pre> 

Now you simply add the following to your /etc/pam.d/vsftpd file(you  only need these entries in the file). Please note that these lines  include logging support to MySQL, so if you don’t want this then please  just remove the last part from sqllog=1 to the last part of verbose=1.
<pre><code class="lang-bash">auth required pam_mysql.so user=vsftpd passwd=rackspace host=localhost db=vsftpd table=accounts usercolumn=username passwdcolumn=pass crypt=0 sqllog=1 logtable=logs logmsgcolumn=msg logusercolumn=user logpidcolumn=pid loghostcolumn=host logtimecolumn=logtime verbose=1
account required pam_mysql.so user=vsftpd passwd=rackspace host=localhost db=vsftpd table=accounts usercolumn=username passwdcolumn=pass crypt=0 sqllog=1 logtable=logs logmsgcolumn=msg logusercolumn=user logpidcolumn=pid loghostcolumn=host logtimecolumn=logtime verbose=1</code></pre> 

I used crypt=0 in this example because I had issues getting the MD5  portion to work with pam_mysql. You could of course change this but it  will only effect how the password field is read from MySQL.
Now lets create a testuser
<pre><code class="lang-bash">>mkdir /home/vsftpd/testuser
chown vsftpd:nobody /home/vsftpd/testuser</code></pre> 

Now lets setup the DB and the user.
<pre><code class="lang-sql">CREATE DATABASE vsftpd;
GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP ON vsftpd.* TO 'vsftpd'@'localhost' IDENTIFIED BY 'password';
flush privileges;</code></pre> 

Now lets create the required tables.
<pre><code class="lang-sql">use vsftpd;
CREATE TABLE accounts (
id INT NOT NULL AUTO_INCREMENT PRIMARY KEY ,
username VARCHAR( 30 ) NOT NULL ,
pass VARCHAR( 50 ) NOT NULL ,
UNIQUE (username)
) ENGINE = MYISAM ;
create table logs (msg varchar(255),
user char(16),
pid int,
host char(32),
rhost char(32),
logtime timestamp
);
quit;</code></pre> 

Now we can add the testuser
<pre><code class="lang-sql">use vsftpd;
INSERT INTO accounts (username, pass) VALUES('testuser', 'secret');</code></pre> 

Now if you got MD5 to work correctly when building the RPM then you could use the following instead
<pre><code class="lang-sql">use vsftpd;
INSERT INTO accounts (username, pass) VALUES('testuser', PASSWORD('secret'));</code></pre> 

Now restart vsftpd and login]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>174</wp:post_id>
		<wp:post_date><![CDATA[2008-02-13 11:18:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-02-13 18:18:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[log-vsftpd-to-mysql]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Windows needs LS</title>
		<link>http://127.0.0.1/index.php/2008/01/08/windows-needs-ls/</link>
		<pubDate>Tue, 08 Jan 2008 18:20:28 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=176</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2009/12/windows.png"><img src="http://ccollins.net/wp-content/uploads/2009/12/windows-150x150.png" alt="windows" width="150" height="150" class="alignleft size-thumbnail wp-image-355" /></a>For some reason no matter how many times I have worked with windows I still find myself typing ls. I just make a ls.bat with the following to squash my shortcomings.
<pre><code class="lang-bash">dir</code></pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>176</wp:post_id>
		<wp:post_date><![CDATA[2008-01-08 11:20:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-08 18:20:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[windows-needs-ls]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Change domain name in Plesk</title>
		<link>http://127.0.0.1/index.php/2008/01/18/change-domain-name-in-plesk/</link>
		<pubDate>Fri, 18 Jan 2008 18:20:59 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=178</guid>
		<description></description>
		<content:encoded><![CDATA[You do not need to migrate data to change a domain name in plesk just  do from the control panel and it will changes all required aspects.
 
<pre><code class="lang-bash">Domains -&gt; domain.com -&gt; domain administrator</code></pre> 

Change the domain name and apply it for the new changes to take place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>178</wp:post_id>
		<wp:post_date><![CDATA[2008-01-18 11:20:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-18 18:20:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[change-domain-name-in-plesk]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Show MySQL queries in real time</title>
		<link>http://127.0.0.1/index.php/2008/01/17/show-mysql-queries-in-real-time/</link>
		<pubDate>Thu, 17 Jan 2008 18:21:23 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=180</guid>
		<description></description>
		<content:encoded><![CDATA[Here is a quick one line to allow you to watch current MySQL queries.
<pre><code class="lang-bash">mysqladmin -vi 1 proc</code></pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>180</wp:post_id>
		<wp:post_date><![CDATA[2008-01-17 11:21:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-17 18:21:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[show-mysql-queries-in-real-time]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Using Spamassassin with Webmin</title>
		<link>http://127.0.0.1/index.php/2008/01/15/using-spamassassin-with-webmin/</link>
		<pubDate>Tue, 15 Jan 2008 18:21:48 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=182</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2009/12/spamassassin.png"><img src="http://ccollins.net/wp-content/uploads/2009/12/spamassassin-150x148.png" alt="spamassassin" width="150" height="148" class="alignleft size-thumbnail wp-image-359" /></a>It appears that some versions on certain mirrors do not include the  spamassassin webmin module. You can get this from their site as it is  now part of the default install.
<a href="http://www.webmin.com/standard.html">http://www.webmin.com/standard.html</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>182</wp:post_id>
		<wp:post_date><![CDATA[2008-01-15 11:21:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-15 18:21:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[using-spamassassin-with-webmin]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Check for POST spam abuse</title>
		<link>http://127.0.0.1/index.php/2008/01/08/check-for-post-spam-abuse/</link>
		<pubDate>Tue, 08 Jan 2008 18:22:14 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=184</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2014/08/padlock_vector_free_stock_download_by_shangraf_srh-d6s5fn6.png"><img src="http://ccollins.net/wp-content/uploads/2014/08/padlock_vector_free_stock_download_by_shangraf_srh-d6s5fn6-150x150.png" alt="security" width="150" height="150" class="alignleft size-thumbnail wp-image-330" /></a>Just use a quick 1 liner like this to get some info on what IP has been trying to POST the most and to what script.
<pre><code class="lang-bash">grep POST /home/httpd/vhosts/*/statistics/logs/access_log | awk '{ print $7 }' | sort | uniq -c | sort -nr</code></pre> 
This can of course be changed to point to your access_logs.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>184</wp:post_id>
		<wp:post_date><![CDATA[2008-01-08 11:22:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-01-08 18:22:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[check-for-post-spam-abuse]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fun with OpenSSL</title>
		<link>http://127.0.0.1/index.php/2007/12/27/fun-with-openssl/</link>
		<pubDate>Thu, 27 Dec 2007 18:22:38 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=186</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2011/11/ssl.png"><img src="http://ccollins.net/wp-content/uploads/2011/11/ssl-150x150.png" alt="ssl" width="150" height="150" class="alignleft size-thumbnail wp-image-345" /></a>Here are some quick one liners to do a laundry list of things with openssl.
<pre><code class="lang-bash">openssl s_client -connect domain.com:443</code></pre> 
or for more info
<pre><code class="lang-bash">openssl s_client -state -verify -showcerts -connect domain.com:443</code></pre> 
Check speed for SSL methods
<pre><code class="lang-bash">openssl speed
openssl speed rsa</code></pre> 
for SMPopenssl speed rsa -multi 2
Check connection time
<pre><code class="lang-bash">openssl s_time -connect remote.host:443</code></pre> 
Check SMTP/TLS
<pre><code class="lang-bash">openssl s_client -connect remote.host:25 -starttls smtp</code></pre> 
Base 64 encoding
send encoded contents of file.txt to stdout
<pre><code class="lang-bash">openssl enc -base64 -in file.txt</code></pre> 
same, but write contents to file.txt.enc
<pre><code class="lang-bash">openssl enc -base64 -in file.txt -out file.txt.enc</code></pre> 
Diagnose SSL error codes
<pre><code class="lang-bash">sshd[31784]: error: RSA_public_decrypt failed: error:0407006A:lib(4):func(112):reason(106)
openssl errstr 0407006A</code></pre> 
Generate crypt style hash
<pre><code class="lang-bash">openssl passwd MySecret</code></pre> 
Generate shadow style hash
<pre><code class="lang-bash">openssl passwd -1 MySecret</code></pre> 
with salt
<pre><code class="lang-bash">openssl passwd -1 -salt sXiKzkus MySecret</code></pre> 
Test for prime numbers
<pre><code class="lang-bash">openssl prime 119054759245460753</code></pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>186</wp:post_id>
		<wp:post_date><![CDATA[2007-12-27 11:22:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-27 18:22:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fun-with-openssl]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Get PHP5, PSA 7.5.4, &amp; Horde to work</title>
		<link>http://127.0.0.1/index.php/2007/12/27/get-php5-psa-7-5-4-horde-to-work/</link>
		<pubDate>Thu, 27 Dec 2007 18:23:07 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=188</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2007/12/php.png"><img src="http://ccollins.net/wp-content/uploads/2007/12/php-150x150.png" alt="php" width="150" height="150" class="alignleft size-thumbnail wp-image-383" /></a>You will need to perform the following to allow Horde on PSA 7.5.4 to work with PHP5.
<pre><code class="lang-bash">pear upgrade DB
cp /usr/share/pear/DB.php /usr/share/psa-horde/pear/DB.php
cp /usr/share/pear/DB/ /usr/share/psa-horde/pear/DB/</code></pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>188</wp:post_id>
		<wp:post_date><![CDATA[2007-12-27 11:23:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-27 18:23:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[get-php5-psa-7-5-4-horde-to-work]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Use mutt to check mail</title>
		<link>http://127.0.0.1/index.php/2007/12/22/use-mutt-to-check-mail/</link>
		<pubDate>Sat, 22 Dec 2007 18:23:37 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=190</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2007/12/mutt.png"><img src="http://ccollins.net/wp-content/uploads/2007/12/mutt.png" alt="mutt" width="128" height="128" class="alignleft size-full wp-image-386" /></a>Simple connection test to verify your mail setup.
<pre><code class="lang-bash">mutt imaps://server.yourdomain.com</code></pre> 
Obviously you can change the protocol and specify the username after you have connected. Please bear in mind that pop3s is listed as pops:// when using mutt]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date><![CDATA[2007-12-22 11:23:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-22 18:23:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[use-mutt-to-check-mail]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mail only works on localhost</title>
		<link>http://127.0.0.1/index.php/2007/12/21/mail-only-works-on-localhost/</link>
		<pubDate>Fri, 21 Dec 2007 18:24:03 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=192</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2009/12/postfix.png"><img src="http://ccollins.net/wp-content/uploads/2009/12/postfix-150x150.png" alt="postfix" width="150" height="150" class="alignleft size-thumbnail wp-image-364" /></a>This happens quite often with new users or admins who are not familiar with mail setups.

Postfix (/etc/postfix/main.cf
<pre><code class="lang-bash">inet_interfaces = localhost</code></pre> 
Change to
<pre><code class="lang-bash">inet_interfaces = all</code></pre> 
Sendmail (/etc/mail/sendmail.mc
<pre><code class="lang-bash">DAEMON_OPTIONS('Port=smtp,Addr=127.0.0.1, Name=MTA')dnl</code></pre> 
Change to
<pre><code class="lang-bash">DAEMON_OPTIONS('Port=smtp,Addr=0.0.0.0, Name=MTA')dnl</code></pre> 
Services need to be notified of the changes
<pre><code class="lang-bash">sendmail service restart</code></pre> 
or
<pre><code class="lang-bash">service postfix reload</code></pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>192</wp:post_id>
		<wp:post_date><![CDATA[2007-12-21 11:24:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-21 18:24:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mail-only-works-on-localhost]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Deny certain users access to a console</title>
		<link>http://127.0.0.1/index.php/2007/12/18/deny-certain-users-access-to-a-console/</link>
		<pubDate>Tue, 18 Dec 2007 18:24:46 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=194</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2014/08/pinguinalulu_tux_the_batman_penguin_11703.png"><img src="http://ccollins.net/wp-content/uploads/2014/08/pinguinalulu_tux_the_batman_penguin_11703-150x150.png" alt="linux" width="150" height="150" class="alignleft size-thumbnail wp-image-334" /></a>Add the required pam_access line to your system-auth or login file in the /etc/pam.d directory. This needs to be the first auth line to override the previous one.
<pre><code class="lang-bash">auth required pam_access.so</code></pre> 
Now add the following to the /etc/security/access.conf file.
<pre><code class="lang-bash">-:username:tty#</code></pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>194</wp:post_id>
		<wp:post_date><![CDATA[2007-12-18 11:24:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-18 18:24:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[deny-certain-users-access-to-a-console]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>List a MySQL user</title>
		<link>http://127.0.0.1/index.php/2007/12/21/list-a-mysql-user/</link>
		<pubDate>Fri, 21 Dec 2007 18:25:11 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=196</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2008/02/mysql.png"><img src="http://ccollins.net/wp-content/uploads/2008/02/mysql-150x150.png" alt="mysql" width="150" height="150" class="alignleft size-thumbnail wp-image-378" /></a>This one is simple but I get tickets for it all the time.
<pre><code class="lang-sql">select User,Host,Password from mysql.user;</code></pre> 
You can also do a select all and format it better
<pre><code class="lang-sql">select * from mysql.user\G</code></pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>196</wp:post_id>
		<wp:post_date><![CDATA[2007-12-21 11:25:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2007-12-21 18:25:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[list-a-mysql-user]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ICMP address mask</title>
		<link>http://127.0.0.1/index.php/2008/09/23/icmp-address-mask/</link>
		<pubDate>Tue, 23 Sep 2008 17:26:30 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=202</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2008/09/network.png"><img src="http://ccollins.net/wp-content/uploads/2008/09/network-150x150.png" alt="network" width="150" height="150" class="alignleft size-thumbnail wp-image-367" /></a>So I recently had a customer who needed to have the address mask  reply and request disabled for his server. On linux this sysctl value is  not the same as FreeBSD it actually requires you to convert binary to  decimal.
<pre><code class="lang-markup">icmp_ratemask - INTEGER
        Mask made of ICMP types for which rates are being limited.
        Significant bits: IHGFEDCBA9876543210
        Default mask:     0000001100000011000 (6168)

        Bit definitions (see include/linux/icmp.h):
                0 Echo Reply
                3 Destination Unreachable *
                4 Source Quench *
                5 Redirect
                8 Echo Request
                B Time Exceeded *
                C Parameter Problem *
                D Timestamp Request
                E Timestamp Reply
                F Info Request
                G Info Reply
                H Address Mask Request
                I Address Mask Reply

        * These are rate limited by default (see default mask above)</code></pre> 

So the current value is 6168 (0000001100000011000) and we are looking  to change the values for H &amp; I which would result in  (1100001100000011000). This is because the H &amp; I are the first 2 in  the mask. Now we can convert it with google calculator to get the  correct new value. Just feed the following into google.
<pre><code class="lang-bash">0b1100001100000011000 in decimal</code></pre> 

You should then get 399384 which is the value you will set for  net.ipv4.icmp_ratemask. You can do this by adding it to the  /etc/sysctl.conf.
<pre><code class="lang-bash">net.ipv4.icmp_ratemask = 399384</code></pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>202</wp:post_id>
		<wp:post_date><![CDATA[2008-09-23 11:26:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2008-09-23 17:26:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[icmp-address-mask]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Expand array with MegaCLI</title>
		<link>http://127.0.0.1/index.php/2009/01/09/expand-array-with-megacli/</link>
		<pubDate>Fri, 09 Jan 2009 18:26:58 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=204</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2010/01/raid.png"><img src="http://ccollins.net/wp-content/uploads/2010/01/raid-150x150.png" alt="raid" width="150" height="150" class="alignleft size-thumbnail wp-image-351" /></a>Recently I needed to add 2 more 1tb drives to my current RAID5 x3 1TB  setup. This was all done with a hotswap cage and no downtime. I will  show you how I added the first one in this example enclosure(252)  slot(2).
Clear it
<pre><code class="lang-bash">MegaCli -pdclear -start -physdrv '[252:2]' -a0</code></pre> 

Set state to (Unconfigured Good)
<pre><code class="lang-bash">MegaCli -pdmakegood -physdrv '[252:2]' -a0</code></pre> 

Add to current logical volume
<pre><code class="lang-bash">MegaCli -ldrecon -start -add -physdrv '[252:2]' -l0 -a0</code></pre> 

Check Progress sigh…
<pre><code class="lang-bash">MegaCli -ldrecon -showprog -l0 -a0</code></pre> 

Prepare for a pretty long wait if you have a large array.
<pre><code class="lang-bash">Reconstruction on VD #0 (target id #0) Completed 43% in 501 Minutes.</code></pre> 

and this is for a 1.8TB with and additional 1TB drive being added to the array.
<pre><code class="lang-bash">/dev/mapper/vg0-lvol0 1.8T 1.6G 1.8T 1% /media/pub</code></pre> 

Yeah!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>204</wp:post_id>
		<wp:post_date><![CDATA[2009-01-09 11:26:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-01-09 18:26:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[expand-array-with-megacli]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Setup Prisim with WordPress</title>
		<link>http://127.0.0.1/index.php/2015/10/06/setup-prisim-with-wordpress/</link>
		<pubDate>Tue, 06 Oct 2015 19:42:21 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=13</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://prismjs.com"><img class="alignleft wp-image-88 size-medium" src="http://ccollins.net/wp-content/uploads/2015/10/Screen-Shot-2015-10-07-at-4.14.46-PM-300x49.png" alt="Prism JS" width="300" height="49" /></a>

When it comes to syntax highlighting in your WordPress postings there really is much options these days that are as superior to PrismJS. Installing it could not be easier and only requires the CSS and JS files you download from http://prismjs.com/. Before going forward be sure to create a -child theme first so you do not mess up any part of your current theme functions.php file.
<pre class="line-numbers"><code class="language-bash">
cp prism.css /path/to/your/wordpress/wp-content/themes/yourTheme-child/
cp prism.js /path/to/your/wordpress/wp-content/themes/yourTheme-child/
</code></pre>
Once your CSS and JS you will need to modify or create your functions.php to load the files. Reminder you should be doing this to your child themes functions.php file.
<pre class="line-numbers"><code class="language-php"><script type="prism-html-markup">
<?php
function add_prism() {
wp_register_style('prismCSS', get_stylesheet_directory_uri() . '/prism.css');
wp_register_script('prismJS', get_stylesheet_directory_uri() . '/prism.js');
wp_enqueue_style('prismCSS');
wp_enqueue_script('prismJS');
}
add_action('wp_enqueue_scripts', 'add_prism');
?>
</script></code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date><![CDATA[2015-10-06 19:42:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-06 19:42:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[setup-prisim-with-wordpress]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="wordpress"><![CDATA[WordPress]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Creating WordPress Child Themes</title>
		<link>http://127.0.0.1/index.php/2015/10/05/creating-wordpress-child-themes/</link>
		<pubDate>Mon, 05 Oct 2015 20:15:58 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=26</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2015/10/splatter-grunge-wordpress-logo.png"><img class="alignleft wp-image-100 size-thumbnail" src="http://ccollins.net/wp-content/uploads/2015/10/splatter-grunge-wordpress-logo-150x150.png" alt="Wordpress" width="150" height="150" /></a>

There is no reason to go mucking up your theme for simple addons or changes when you can instead make a simple child theme and keeps your changes there. Child themes work by using the parent theme setting and functions but allowing you to set overrides and additions. Start by creating a new directory in your theme directory with the addition of -child to the end.

<pre><code class="lang-bash">
mkdir /path/to/your/wordpress/wp-content/themes/yourTheme-child
</code></pre>

Now you need to populate your yourTheme-child/style.css file
<div class="lang-markup">
<pre class="line-numbers"><code class="language-javascript">
/*
Theme Name: yourTheme-child
Theme URI: http://www.yourdomain.com/yourTheme
Version: 1.0
Description: Your Theme Description
Author: Your Themes
Author URI: http://www.yourdomain.com
Template: yourTheme
*/

@import url("../yourTheme/style.css");

/*------------------------------------------------*/
/*-----------------[RESET]------------------------*/
/*------------------------------------------------*/
</code></pre>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date><![CDATA[2015-10-05 20:15:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-05 20:15:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[creating-wordpress-child-themes]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Find Non-SSL links in a SSL page</title>
		<link>http://127.0.0.1/index.php/2011/11/17/find-non-ssl-links-in-a-ssl-page/</link>
		<pubDate>Thu, 17 Nov 2011 18:14:49 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=158</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2011/11/ssl.png"><img src="http://ccollins.net/wp-content/uploads/2011/11/ssl-150x150.png" alt="ssl" width="150" height="150" class="alignleft size-thumbnail wp-image-345" /></a>This can help you narrow down certificate warnings about mixed content.
<pre><code class="lang-bash">curl -I domain.com | grep "http:\"</code></pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>158</wp:post_id>
		<wp:post_date><![CDATA[2011-11-17 11:14:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2011-11-17 18:14:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[find-non-ssl-links-in-a-ssl-page]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sendmail to Postfix</title>
		<link>http://127.0.0.1/index.php/2009/12/17/sendmail-to-postfix/</link>
		<pubDate>Thu, 17 Dec 2009 18:27:25 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=206</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2009/12/postfix.png"><img src="http://ccollins.net/wp-content/uploads/2009/12/postfix-150x150.png" alt="postfix" width="150" height="150" class="alignleft size-thumbnail wp-image-364" /></a>Stop your current MTA
<pre><code class="lang-bash">service sendmail stop</code></pre> 

Install Postfix
<pre><code class="lang-bash">yum install postfix</code></pre> 

Set Postfix to be new MTA
<pre><code class="lang-bash">alternatives --set mta /usr/sbin/sendmail.postfix &amp;&amp; service postfix start</code></pre> 

Verify you get the Postfix agent
<pre><code class="lang-bash">telnet youromdian.com 25</code></pre> 

You are looking for the Postfix line like this
<pre><code class="lang-bash">220 your.domain.com ESMTP Postfix</code></pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>206</wp:post_id>
		<wp:post_date><![CDATA[2009-12-17 11:27:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-12-17 18:27:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sendmail-to-postfix]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Set default timeout for bash</title>
		<link>http://127.0.0.1/index.php/2009/12/21/set-default-timeout-for-bash/</link>
		<pubDate>Mon, 21 Dec 2009 18:27:46 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=208</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2009/12/bash.png"><img src="http://ccollins.net/wp-content/uploads/2009/12/bash-150x150.png" alt="bash" width="150" height="150" class="alignleft size-thumbnail wp-image-362" /></a>Create the following in the /etc/profile.d/tmout.sh
<pre><code class="lang-bash">TMOUT=900
readonly TMOUT
export TMOUT</code></pre> 

Now chmod 755 that file and your good to go.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date><![CDATA[2009-12-21 11:27:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-12-21 18:27:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[set-default-timeout-for-bash]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Change to stronger SHA-512 passwords for system</title>
		<link>http://127.0.0.1/index.php/2009/12/21/change-to-stronger-sha-512-passwords-for-system/</link>
		<pubDate>Mon, 21 Dec 2009 18:28:09 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=210</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2014/08/padlock_vector_free_stock_download_by_shangraf_srh-d6s5fn6.png"><img src="http://ccollins.net/wp-content/uploads/2014/08/padlock_vector_free_stock_download_by_shangraf_srh-d6s5fn6-150x150.png" alt="security" width="150" height="150" class="alignleft size-thumbnail wp-image-330" /></a>I want to set a requirement of at least 1 uppercase, 1 lowercaser, 1  number, &amp; 1 special character. First we will modify  /etc/pam.d/system-auth and change the following line.
<pre><code class="lang-bash">password requisite pam_cracklib.so try_first_pass retry=3</code></pre> 

to
<pre><code class="lang-bash">password required try_first_pass retry=3 minlen=14 dcredit=-1 ucredit=-1 ocredit=-1 lcredit=0</code></pre> 

Now we are going to set a lockout for failed passwords by changing.
<pre><code class="lang-bash">auth sufficient pam_unix.so nullok try_first_pass</code></pre> 

to
<pre><code class="lang-bash">auth required pam_unix.so nullok try_first_pass</code></pre> 

Now comment out the following 2 lines
<pre><code class="lang-bash">auth requisite pam_succeed_if.so uid &gt;= 500 quiet
auth required pam_deny.so</code></pre> 

Now add the following to the end of the auth lines in the /etc/pam.d/sshd file
<pre><code class="lang-bash">auth required pam_tally2.so deny=5 onerr=fail</code></pre> 

And this to the end of the the account lines
<pre><code class="lang-bash">account required pam_tally2.so</code></pre> 

If you get any accounts locked out you can use this to unlock them
<pre><code class="lang-bash">/sbin/pam_tally2 --user username --reset</code></pre> 

Now lets set the password hashing algorithm to SHA-512
<pre><code class="lang-bash">authconfig --passalgo=SHA512 --update</code></pre> 

Now reset the password for all your users. You can cat the  /etc/shadow file and verify the passwords start with $5  now instead of  $1]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>210</wp:post_id>
		<wp:post_date><![CDATA[2009-12-21 11:28:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-12-21 18:28:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[change-to-stronger-sha-512-passwords-for-system]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Postfix+Amavisd+ClamAV+SpamAssassin+Razor+SMTP Auth</title>
		<link>http://127.0.0.1/index.php/2009/12/21/postfixamavisdclamavspamassassinrazorsmtp-auth/</link>
		<pubDate>Mon, 21 Dec 2009 18:28:30 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=212</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2009/12/spamassassin.png"><img src="http://ccollins.net/wp-content/uploads/2009/12/spamassassin-150x148.png" alt="spamassassin" width="150" height="148" class="alignleft size-thumbnail wp-image-359" /></a>First lets install the require software
<pre><code class="lang-bash">yum install clamd amavisd-new spamassassin razor-agents cyrus-sasl-md5</code></pre> 

Now lets add some entries to the /etc/postfix/main.cf file
<pre><code class="lang-bash">header_checks = regexp:/usr/local/etc/postfix/header_checks
smtpd_sasl_auth_enable = yes
smtpd_sasl_security_options = noanonymous
broken_sasl_auth_clients = yes
smtpd_client_restrictions =
   check_client_access hash:/usr/local/etc/postfix/blackwhite.map,
   reject_non_fqdn_hostname,
   reject_non_fqdn_sender,
   reject_unknown_sender_domain,
   permit_mynetworks,
   reject_rbl_client sbl.spamhaus.org,
   reject_rbl_client bl.spamcop.net,
   permit

smtpd_sender_restrictions =
   check_sender_access hash:/usr/local/etc/postfix/blackwhite.map,
   reject_unknown_sender_domain,
   reject_non_fqdn_sender,
   permit

smtpd_recipient_restrictions =
   permit_sasl_authenticated,
   check_recipient_access hash:/usr/local/etc/postfix/blackwhite.map,
   reject_non_fqdn_hostname,
   reject_non_fqdn_sender,
   reject_non_fqdn_recipient,
   reject_unknown_sender_domain,
   permit_mynetworks,
   reject_unauth_destination,
   permit

### Tarpit those bots/clients/spammers who send errors or scan for accounts
smtpd_error_sleep_time = 60
smtpd_soft_error_limit = 60
smtpd_hard_error_limit = 10</code></pre> 

Now lets create our blackwhite.map files
<pre><code class="lang-bash">touch /etc/postfix/blackwhite.map</code></pre> 

Add your entries like this
<pre><code class="lang-bash">user@domain.com OK
user@spamdomain.com REJECT</code></pre> 

Reload your black &amp; white maps
<pre><code class="lang-bash">postmap /etc/postfix/blackwhite.map
postfix reload</code></pre> 

Now edit you /etc/postfix/master.cf file and change the smtp entry to be like this.
<pre><code class="lang-bash">smtp inet n - n - - smtpd
# -o content_filter=smtp-amavis:[127.0.0.1]:10024</code></pre> 

If you want to use pre-queue filtering then use the following entry.
<pre><code class="lang-bash">smtp inet n - n - - smtpd
# -o smtpd_proxy_filter=smtp-amavis:[127.0.0.1]:10024</code></pre> 

Now we need to edit the /etc/postfix/master.cf by adding this to the bottom to allow mail from Amavis to come back in.
<pre><code class="lang-bash">smtp-amavis unix -      -       -     -       2  smtp
    -o smtp_data_done_timeout=1200
    -o disable_dns_lookups=yes
127.0.0.1:10025 inet n  -       -     -       -  smtpd
    -o content_filter=
    -o local_recipient_maps=
    -o relay_recipient_maps=
    -o smtpd_restriction_classes=
    -o smtpd_client_restrictions=
    -o smtpd_helo_restrictions=
    -o smtpd_sender_restrictions=
    -o smtpd_recipient_restrictions=permit_mynetworks,reject
    -o mynetworks=127.0.0.0/8
    -o strict_rfc821_envelopes=yes</code></pre> 

Add the following to /etc/alias to create a virus alert alias.
<pre><code class="lang-bash">virusalert: root</code></pre> 

Now reload the new alias file.
<pre><code class="lang-bash">postalias /etc/aliases</code></pre> 

Now restart postfix and verify you have port 10025 open.
<pre><code class="lang-bash">netstat -ntpl | grep 25</code></pre> 

You should see the following.
<pre><code class="lang-bash">tcp 0 0 0.0.0.0:225 0.0.0.0:* LISTEN 2896/sbadm
tcp 0 0 127.0.0.1:10025 0.0.0.0:* LISTEN 30724/master
tcp 0 0 0.0.0.0:25 0.0.0.0:* LISTEN 30724/master</code></pre> 

Now lets setup Amavis by editing /etc/amavisd.conf. Set your desired  Anti-Virus and your hostname and any other options you would like.
<pre><code class="lang-bash">$mydomain = 'example.com'; # a convenient default for other settings
$final_virus_destiny = D_DISCARD;
$final_banned_destiny = D_BOUNCE;
$final_spam_destiny = D_PASS;
@av_scanners = (

# ### http://www.clamav.net/
['ClamAV-clamd',
\&amp;ask_daemon, ["CONTSCAN {}\n", "/var/amavis/clamd"],
qr/\bOK$/m, qr/\bFOUND$/m,
qr/^.*?: (?!Infected Archive)(.*) FOUND$/m ],</code></pre> 

Now lets create a few required directories.
<pre><code class="lang-bash">mkdir -p /var/amavis/{clamav,.spamassassin,.razor}
chown -R amavis:amavis /var/amavis/
chgrp -R amavis /var/log/clamav
chmod 775 /var/log/clamav
chmod -R 664 /var/log/clamav/*
chgrp -R amavis /var/clamav
chmod 664 /var/clamav/mirrors.dat</code></pre> 

We need to setup logrotate to keep these permissions by editing the “create” line in the following files.
/etc/logrotate.d/clamav
/etc/logrotate.d/freshclam
<pre><code class="lang-bash">create 664 clamav amavis</code></pre> 

Now lets edit /etc/clamd.conf
<pre><code class="lang-bash">User amavis
LocalSocket /var/amavis/clamd</code></pre> 

Now lets modify the /etc/freshclam.conf
<pre><code class="lang-bash">DatabaseOwner amavis</code></pre> 

Now lets start setting up Razor
<pre><code class="lang-bash">su - amavis
razor-admin -create
razor-admin -discover
razor-admin -register -user postmaster@yourdomain.com
exit</code></pre> 

This should store the file in a location like this so you can view it for your user and password.
<pre><code class="lang-bash">cat /var/amavis/.razor/identity-postmaster@yourdomain.com
pass = blahblahblahmehmehmehblah
user = postmaster@yourdomain.com</code></pre>

Next lets edit /etc/mail/spamassassin/local.cf. These setting are  just what I used and you would be best setting your own custom setting  most likely.
<pre><code class="lang-bash">skip_rbl_checks 1
use_bayes 1
bayes_path /var/amavis/.spamassassin/bayes
use_razor2 1
use_pyzor 0
dns_available yes
header LOCAL_RCVD Received =~ /\S+\.section6.net\s+\(.*\[.*\]\)/
score LOCAL_RCVD -50
score DCC_CHECK 4.000
score RAZOR2_CHECK 2.500
score BAYES_99 5.300
score BAYES_90 4.500
score BAYES_80 4.000
score HTML_FONT_INVISIBLE 3
score HTML_FONTCOLOR_UNKNOWN 2
score ORDER_NOW 1.5
score CLICK_BELOW 1
score LIMITED_TIME_ONLY 1
score HTML_IMAGE_ONLY_02 2
score HTML_IMAGE_ONLY_04 2
score OFFERS_ETC 2
score HTML_LINK_CLICK_HERE 1
score LINES_OF_YELLING 1</code></pre> 

Now we can start amavis and set it to start on reboots always.
<pre><code class="lang-bash">/etc/rc.d/init.d/amavisd start
chkconfig amavisd on</code></pre> 

Now we can start clamd
<pre><code class="lang-bash">/etc/rc.d/init.d/clamd start
chkconfig clamd on</code></pre> 

Now uncomment the following line that you added to the /etc/postfix/master.cf file.
<pre><code class="lang-bash"># -o content_filter=smtp-amavis:[127.0.0.1]:10024</code></pre> 

Now reload postfix
<pre><code class="lang-bash">postfix reload</code></pre> 

Now we can verify if SMTP Auth is working.
<pre><code class="lang-bash">telnet 0 25</code></pre> 

Now type EHLO yourdomain.com and you should get the following showing you MD5 support fot login.
<pre><code class="lang-bash">250-br0ck.bigkernel.com
250-PIPELINING
250-SIZE 10240000
250-VRFY
250-ETRN
250-STARTTLS
250-AUTH PLAIN LOGIN CRAM-MD5 DIGEST-MD5
250-AUTH=PLAIN LOGIN CRAM-MD5 DIGEST-MD5
250-ENHANCEDSTATUSCODES
250-8BITMIME
250 DSN</code></pre> 

From here you should be all set so that incoming messages hit Postfix  and then gets shoved off to Amavis where the Spam and Virus scanning  will take place and then it will be delivered back to Postfix on port  10025.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>212</wp:post_id>
		<wp:post_date><![CDATA[2009-12-21 11:28:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-12-21 18:28:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[postfixamavisdclamavspamassassinrazorsmtp-auth]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>One line to put SSH key on remote host</title>
		<link>http://127.0.0.1/index.php/2009/12/22/one-line-to-put-ssh-key-on-remote-host/</link>
		<pubDate>Tue, 22 Dec 2009 18:28:52 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=214</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2009/12/openssh.png"><img src="http://ccollins.net/wp-content/uploads/2009/12/openssh-150x150.png" alt="openssh" width="150" height="150" class="alignleft size-thumbnail wp-image-357" /></a> 
<pre><code class="lang-bash">cat ~/.ssh/id_rsa.pub | ssh user@hostname 'cat &gt;&gt; .ssh/authorized_keys'</code></pre> 
or
<pre><code class="lang-bash">ssh-copy-id user@host</code></pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>214</wp:post_id>
		<wp:post_date><![CDATA[2009-12-22 11:28:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-12-22 18:28:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[one-line-to-put-ssh-key-on-remote-host]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MegaCLI cheat sheet part 1</title>
		<link>http://127.0.0.1/index.php/2010/01/01/megacli-cheat-sheet-part-1/</link>
		<pubDate>Fri, 01 Jan 2010 18:29:17 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=216</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2010/01/raid.png"><img src="http://ccollins.net/wp-content/uploads/2010/01/raid-150x150.png" alt="raid" width="150" height="150" class="alignleft size-thumbnail wp-image-351" /></a>Here are some quick commands that I have to use on a daily basis for  RAID automation issues. You can either keep -aall in there or if you  have more then one adapter you can replace -aall with the actual adapter  number such as -a0 and you could replace -lall with you actual logical  drive number like -l0.

Get basic adapter information including Adapter#
<pre><code class="lang-bash">MegaCli -adpallinfo -aall</code></pre>

List all physical disk information
<pre><code class="lang-bash">MegaCli -pdlist -aall
</code></pre>

Show information about a particular disk
(replace 252 with you enclosure ID and 4 with the drive ID)
<pre><code class="lang-bash">MegaCli -pdinfo -physdrv [252:4] -aall
</code></pre>

Show logical drive information and status
<pre><code class="lang-bash">Megacli -ldinfo -lall -aall
</code></pre>

Start logical drive consistency check
<pre><code class="lang-bash">MegaCli -ldcc -start -lall -aall
</code></pre>

View progress of consistency check
<pre><code class="lang-bash">MegaCli -ldcc -showprog -lall -aall
</code></pre>

Get SAS Enclosure information
<pre><code class="lang-bash">MegaCli -encinfo -aall
</code></pre>

Show all BBU information
<pre><code class="lang-bash">MegaCli -adpbbucmd -aall
</code></pre>

Show patrol read information
<pre><code class="lang-bash">MegaCli -adppr -info -aall
</code></pre>

Start a patrol read
<pre><code class="lang-bash">MegaCli -adppr -start -aall
</code></pre>

View progress of patrol read
<pre><code class="lang-bash">Megacli -adppr -info -aall
</code></pre>

Enable/Disable alarm
<pre><code class="lang-bash">MegaCli -adpsetprop alarmdsbl -aall
MegaCli -adpsetprop alarmenbl -aall
</code></pre>

View current log
<pre><code class="lang-bash">MegaCli -fwtermlog -dsply -aall
</code></pre>

Dump event log to file for checking
<pre><code class="lang-bash">MegaCli -adpeventlog -getevents -f /tmp/event.log -a0
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>216</wp:post_id>
		<wp:post_date><![CDATA[2010-01-01 11:29:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-01 18:29:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[megacli-cheat-sheet-part-1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Windows 7 64bit and Macbook Pro (osX)</title>
		<link>http://127.0.0.1/index.php/2009/12/29/windows-7-64bit-and-macbook-pro-osx/</link>
		<pubDate>Tue, 29 Dec 2009 18:29:48 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=218</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2009/12/windows.png"><img src="http://ccollins.net/wp-content/uploads/2009/12/windows-150x150.png" alt="windows" width="150" height="150" class="alignleft size-thumbnail wp-image-355" /></a>So the first hurdle I had to overcome was a bad bootable disc that  was given to us from Microsoft. Whenever I used the CD they gave us in  my macbook I would get the following on boot.
<pre><code class="lang-bash">    1.
    2.
Select CD-ROM Boot Type :
</code></pre>

Now this error is not supposed to create issues with newer unibody  macbook pros because they have the newer BIOS compatibility layer. This  problem occurs because the ETFSBOOT.COM program does not handle file  versions according to the International Standards Organization (ISO)  9660 specification. The ISO 9660 specification instructs that a name for  a file record should consist of the file name that is followed by the  file version. Also, the specification instructs that you must separate  the file name and the file version by a semicolon. For example, the  following file record is valid:
<pre><code class="lang-bash">filename;1</code></pre>

The Windows PE file system driver handles the file version as an  option. However, the ETFSBOOT.COM program cannot locate the  Setupldr.bin/Bootmgr file if you use a file version. Therefore, if you  use a program other than CDimage.exe or OSCDimg.exe to create the CDFS  image file, or another program that will not allow you to remove the ;1  versioning, then you will not be able to boot from the CD.

So now lets fix the boot section by rebuilding to ISO correctly.  First of all I will be doing this in Linux with Wine but you can do it  Windows as well by changing the paths up some.
First lets install wine and set it up.
<pre><code class="lang-bash">apt-get install wine
winecfg
</code></pre>

Now lets get the required exe file
<pre><code class="lang-bash">cd ~/.wine/drive_c
wget http://ccollins.net/files/oscdimg.exe
</code></pre>

Now lets create the required directories.
<pre><code class="lang-bash">mkdir ~/.wine/drive_c/win7iso &amp;&amp; mkdir ~/.wine/drive_c/win7dvd
</code></pre>

Now lets mount the ISO and copy all the files in to the new win7iso directory.
<pre><code class="lang-bash">mount -o loop en_windows_7_enterprise_x64_dvd_x15-70749.iso /mnt
cp -R /mnt/* ~/.wine/drive_c/win7iso/
</code></pre>

Now lets build the new ISO
<pre><code class="lang-bash">cd ~/.wine/drive_c
wine oscdimg.exe -n -m -bc:win7iso/boot/etfsboot.com c:win7iso c:win7dvd/win7_64_ent.iso
</code></pre>

Now mount the ISO and verify all the files are there
<pre><code class="lang-bash">mount -o loop ~/.wine/drive_c/win7dvd/win7_64_ent.iso /mnt
</code></pre>

If they are all there simply unmount /mnt and burn the new ISO you  have. When you boot the first time into windows you will need to setup  BootCamp. The first thing you should do is the following.
Start Menu -&gt; Programs -&gt; Accessories -&gt; Command Prompt (Right Click &amp; choose “Run as Administrator”)
Now start the BootCamp64.msi manually like this.
<pre><code class="lang-bash">d:
cd Boot Camp\Drivers\Apple
BootCamp64.msi
</code></pre>

This will bypass the check the the normal setup.exe does and allow  you to install everything required. If you want to edit the setup.exe  file and remove the depend lines.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>218</wp:post_id>
		<wp:post_date><![CDATA[2009-12-29 11:29:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-12-29 18:29:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[windows-7-64bit-and-macbook-pro-osx]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MacPorts and osX</title>
		<link>http://127.0.0.1/index.php/2009/12/30/macports-and-osx/</link>
		<pubDate>Wed, 30 Dec 2009 18:30:11 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=220</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2009/12/MacPorts.png"><img src="http://ccollins.net/wp-content/uploads/2009/12/MacPorts-150x70.png" alt="MacPorts" width="150" height="70" class="alignleft size-thumbnail wp-image-353" /></a>Install a port
<pre><code class="lang-bash">port install port_name</code></pre>
 
Install pre-compiled binary port
<pre><code class="lang-bash">port pkg port_name</code></pre>

Create osX DMG file from port
<pre><code class="lang-bash">port dmg port_name</code></pre>

Create RPM file from port 
<pre><code class="lang-bash">port rpm port_name</code></pre>

Upgrade a port 
<pre><code class="lang-bash">port upgrade port_name</code></pre>

Upgrade all outdated ports
<pre><code class="lang-bash">port upgrade outdated</code></pre>

Upgrade a port but not the dependencies
<pre><code class="lang-bash">port -n upgrade port_name</code></pre>

Upgrade a port and uninstall the old version
<pre><code class="lang-bash">port -u upgrade port_name</code></pre>

Uninstall a port (You can force with -f)
<pre><code class="lang-bash">port uninstall port_name</code></pre>

Uninstall all ports
<pre><code class="lang-bash">port uninstall all</code></pre>

Clean a port
<pre><code class="lang-bash">>port clean --all port_name</code></pre>

List port contents
<pre><code class="lang-bash">port contents port_name</code></pre>

List all ports 
<pre><code class="lang-bash">port list</code></pre>

List all installed ports
<pre><code class="lang-bash">port installed</code></pre>

List outdated ports
<pre><code class="lang-bash">port outdated</code></pre>

Search ports
<pre><code class="lang-bash">port search whatever</code></pre>

Port info
<pre><code class="lang-bash">port info port_name</code></pre>

Show port dependencies
<pre><code class="lang-bash">port deps port_name</code></pre>

Show port variants
<pre><code class="lang-bash">port variants port_name</code></pre>

Invoking variants for ports
<pre><code class="lang-bash">port install port_name +variant_name</code></pre>

Removing default variants
<pre><code class="lang-bash">port install port_name -variant_name</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>220</wp:post_id>
		<wp:post_date><![CDATA[2009-12-30 11:30:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2009-12-30 18:30:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[macports-and-osx]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GNU plot your SAR data</title>
		<link>http://127.0.0.1/index.php/2010/01/14/gnu-plot-your-sar-data/</link>
		<pubDate>Thu, 14 Jan 2010 18:30:34 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=222</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2010/01/gnuplot-logo.png"><img src="http://ccollins.net/wp-content/uploads/2010/01/gnuplot-logo.png" alt="gnuplot-logo" width="96" height="96" class="alignleft size-full wp-image-349" /></a>So recently I had to assemble some sar data into some nice  graphs that the higher ups could understand. So I decided to write out a  small script to graph out all the CPU and Memory stuff I wanted. Here  is how you can graph your data easily with gnuplot.

First we will build the sar data we want to work with. For this one I will do CPU
<pre><code class="lang-bash">sar -u &gt; /tmp/cpu_util.dat</code></pre> 

Now we will use GNUplot to graph out the data from the file
<pre><code class="lang-bash">gnuplot</code></pre> 

Now simply enter the following information
<pre><code class="lang-bash">set terminal png
set output 'cpu_util_$i.png'
set xdata time
set timefmt '%H:%M:%S'
set xrange ['00:00:00':'23:59:59']
set yrange [0:100]
set xlabel 'Hour'
set ylabel 'Percentage'
set xtics '00:00:00', 3600, '23:59:59'
set format x '%H'
set nomxtics
set grid
set size 2,1
set key right outside
set timestamp bottom
set title 'CPU Usage'
plot '/tmp/cpu_util.dat' using 1:3 title '%user' with lines, '/tmp/cpu_util.dat' using 1:5 title '%system' with lines, '/tmp/cpu_util.dat' using 1:6 title '%iowait' with lines</code></pre> 

To edit the graph size simple change “set size” to your desired size.  The first number is the height and the second is the width. In addition  you can change what is reported by altering the 1:3, 1:4, or 1:5 lines  to be what ever column you want from the output of your sar command.

If you want to get more fancy you can do something like this in your script to echo in the GNUplot settings.
<pre><code class="lang-bash">#!/bin/bash

cpu=/tmp/cpu_util.dat
mem=/tmp/mem_util.dat
gp=/tmp/gp

for i in ls -tr /var/log/sysstat | grep sa[0-99]
do
    sar -u -f /var/log/sysstat/$i &gt; $cpu
    fdate=ls -latr /var/log/sysstat/"$i" | awk '{ print $6 $7}'
    echo "
    set terminal png
    set output 'cpu_util_$i.png'
    set xdata time
    set timefmt '%H:%M:%S'
    set xrange ['00:00:00':'23:59:59']
    set yrange [0:100]
    set xlabel 'Hour'
    set ylabel 'Percentage'
    set xtics '00:00:00', 3600, '23:59:59'
    set format x '%H'
    set nomxtics
    set grid
    set size 2,1
    set key right outside
    set timestamp bottom
    set title 'CPU $fdate'
    plot '$cpu' using 1:3 title '%user' with lines, '$cpu' using 1:5 title '%system' with lines, '$cpu' using 1:6 title '%iowait' with lines" &gt; $gp gnuplot $gp rm -f $cpu $mem $gp
done</code></pre> ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>222</wp:post_id>
		<wp:post_date><![CDATA[2010-01-14 11:30:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-14 18:30:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gnu-plot-your-sar-data]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Redirect traffic to a new IP address</title>
		<link>http://127.0.0.1/index.php/2010/01/15/redirect-traffic-to-a-new-ip-address/</link>
		<pubDate>Fri, 15 Jan 2010 18:30:55 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=224</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2010/01/firewall.png"><img src="http://ccollins.net/wp-content/uploads/2010/01/firewall-150x150.png" alt="firewall" width="150" height="150" class="alignleft size-thumbnail wp-image-347" /></a>First make sure you enable forwarding
<pre><code class="lang-bash">sysctl net.ipv4.ip_forward=1</code></pre> 

Next issue the iptables rules for the port you want to redirect.
<pre><code class="lang-bash">iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to-destination 69.174.244.190:80</code></pre> 

Next we will masquerade the traffic
<pre><code class="lang-bash">iptables -t nat -A POSTROUTING -j MASQUERADE</code></pre> 
Simple]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>224</wp:post_id>
		<wp:post_date><![CDATA[2010-01-15 11:30:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2010-01-15 18:30:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[redirect-traffic-to-a-new-ip-address]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Grant sudo access to group with no password</title>
		<link>http://127.0.0.1/index.php/2014/08/26/grant-sudo-access-to-group-with-no-password/</link>
		<pubDate>Tue, 26 Aug 2014 17:31:17 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=226</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2014/08/sudo.png"><img src="http://ccollins.net/wp-content/uploads/2014/08/sudo-150x150.png" alt="sudo" width="150" height="150" class="alignleft size-thumbnail wp-image-339" /></a>While I am not a fan of this setup sometimes there is a special request and it needs to be setup.
<pre><code class="lang-bash">visudo</code></pre> 

Now add a line for the group you are going to setup
<pre><code class="lang-bash">%yourgroupname ALL=(ALL) NOPASSWD: ALL</code></pre> 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>226</wp:post_id>
		<wp:post_date><![CDATA[2014-08-26 11:31:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-26 17:31:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[grant-sudo-access-to-group-with-no-password]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Apache proxy to a different port</title>
		<link>http://127.0.0.1/index.php/2014/08/26/apache-proxy-to-a-different-port/</link>
		<pubDate>Tue, 26 Aug 2014 17:31:41 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=228</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2014/08/apache.png"><img src="http://ccollins.net/wp-content/uploads/2014/08/apache-150x66.png" alt="apache" width="150" height="66" class="alignleft size-thumbnail wp-image-337" /></a>Sometimes you may need to redirect a simple URL like jira.company.com to something like jira.company.com:8080 for easier access. A simple Apache Proxy will solve this.
<pre><code class="lang-apache"><VirtualHost *:80>
ServerName yourdomain.com
ProxyPass / http://yourdomain:8080
ProxyReverse / http://yourdomain.com
</VirtualHost>
</code></pre> 


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date><![CDATA[2014-08-26 11:31:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-26 17:31:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[apache-proxy-to-a-different-port]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mount ISO as a loopback device</title>
		<link>http://127.0.0.1/index.php/2014/08/24/mount-iso-as-a-loopback-device/</link>
		<pubDate>Sun, 24 Aug 2014 17:32:06 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=230</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2014/08/iso.png"><img src="http://ccollins.net/wp-content/uploads/2014/08/iso-150x150.png" alt="iso" width="150" height="150" class="alignleft size-thumbnail wp-image-343" /></a>Mount a ISO file as a loopback device for access.
<pre><code class="lang-bash">cd /path/to/dir/with/ISO
mount yourfile.iso -o loop /mnt
</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>230</wp:post_id>
		<wp:post_date><![CDATA[2014-08-24 11:32:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-24 17:32:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mount-iso-as-a-loopback-device]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Set service to start on reboot</title>
		<link>http://127.0.0.1/index.php/2014/08/26/set-service-to-start-on-reboot/</link>
		<pubDate>Tue, 26 Aug 2014 17:32:36 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=232</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2014/08/pinguinalulu_tux_the_batman_penguin_11703.png"><img src="http://ccollins.net/wp-content/uploads/2014/08/pinguinalulu_tux_the_batman_penguin_11703-150x150.png" alt="linux" width="150" height="150" class="alignleft size-thumbnail wp-image-334" /></a>Come across this one all the time still. To set a service from init.d to start on reboot you can doo the following.

First list the service that are available and the name of the service you are working with. We will use Apache (httpd) for this example.
<pre><code class="lang-bash">chkconfig --list</code></pre>
Now set the service to start on reboots
<pre><code class="lang-bash">chkconfig httpd on</code></pre>
You can also set the service to run at various runtimes by using the --level argument.
<pre><code class="lang-bash">chkconfig httpd on --levels 345</code></pre>

Or I could set it for only one run level.
<pre><code class="lang-bash">chkconfig httpd on --levels 3</code></pre>



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>232</wp:post_id>
		<wp:post_date><![CDATA[2014-08-26 11:32:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-26 17:32:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[set-service-to-start-on-reboot]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Find processes that are in a LISTEN state</title>
		<link>http://127.0.0.1/index.php/2014/08/26/find-processes-that-are-in-a-listen-state/</link>
		<pubDate>Tue, 26 Aug 2014 17:33:01 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=234</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2014/08/pinguinalulu_tux_the_batman_penguin_11703.png"><img src="http://ccollins.net/wp-content/uploads/2014/08/pinguinalulu_tux_the_batman_penguin_11703-150x150.png" alt="linux" width="150" height="150" class="alignleft size-thumbnail wp-image-334" /></a>I just use a lsof to pull the network stack and then look for LISTEN status
<pre><code class="lang-bash">lsof -n | grep LISTEN</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>234</wp:post_id>
		<wp:post_date><![CDATA[2014-08-26 11:33:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-26 17:33:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[find-processes-that-are-in-a-listen-state]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Extend LVM partition</title>
		<link>http://127.0.0.1/index.php/2014/08/26/extend-lvm-partition/</link>
		<pubDate>Tue, 26 Aug 2014 17:33:22 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=236</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2014/08/lvm.png"><img src="http://ccollins.net/wp-content/uploads/2014/08/lvm-300x93.png" alt="lvm" width="300" height="93" class="alignleft size-medium wp-image-332" /></a>This is really easy and is something every linux admin should know. In this example we are going to extend it to be 500MB. If I wanted to add 500MB then I would have used the + sign for L+500M.
<pre><code class="lang-bash">umount /path/to/you/partition
lvextend /path/to/your/partition -L500M
e2fsck -f /path/to/your/partition
resize2fs /path/to/your/partition
mount /path/to/your/partition
</code></pre>

Verify the extra space is there and you are good to go.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>236</wp:post_id>
		<wp:post_date><![CDATA[2014-08-26 11:33:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-26 17:33:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[extend-lvm-partition]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Protect files in a directory from being deleted</title>
		<link>http://127.0.0.1/index.php/2014/08/26/protect-files-in-a-directory-from-being-deleted/</link>
		<pubDate>Tue, 26 Aug 2014 17:33:41 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=238</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2014/08/padlock_vector_free_stock_download_by_shangraf_srh-d6s5fn6.png"><img src="http://ccollins.net/wp-content/uploads/2014/08/padlock_vector_free_stock_download_by_shangraf_srh-d6s5fn6-150x150.png" alt="security" width="150" height="150" class="alignleft size-thumbnail wp-image-330" /></a>Sometimes you may want a shared dropbox folder where users from all over can add files but you do not want them to be able to delete them. This is where you want to look into how ugoa works with permissions for the sticky attribute. By using the sticky attribute on the directory you can prevents unprivileged users from removing or renaming a file in the directory unless the own the file or directory. This is similar to what you would find on the /tmp directory and is referred to as <em>restricted deletion</em>

 
<pre><code class="lang-bash">mkdir /dropbox
chown root:yourgroup /dropbox
chmod 1777 /dropbox</code></pre>





]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>238</wp:post_id>
		<wp:post_date><![CDATA[2014-08-26 11:33:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-26 17:33:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[protect-files-in-a-directory-from-being-deleted]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Install AWS CLI on OSX</title>
		<link>http://127.0.0.1/index.php/2015/10/06/install-aws-cli-on-osx-el-capitan/</link>
		<pubDate>Tue, 06 Oct 2015 20:44:52 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=38</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://ccollins.net/wp-content/uploads/2015/10/aws_cli1.png"><img class="alignleft wp-image-95 size-medium" src="http://ccollins.net/wp-content/uploads/2015/10/aws_cli1-300x83.png" alt="Amazon AWS" width="300" height="83" /></a>

You are going to need to make sure you meet a few requirements to install the CLI tools but you should already have most in place.
<pre><code class="language-bash">
Python 2 or Python 3.3+
Pip
</code></pre>

First verify your python version.
<pre><code class="lang-bash">
python --version
</code></pre>
You should get a response similar to this.
<pre><code class="lang-bash">
➜  ~  python --version
Python 2.7.10
</code></pre>
Now check for Pip support
<pre><code class="lang-bash">
pip --help

Usage:
  pip <command></command> [options]
</code></pre>
If you do not have Pip installed here is a quick HOWTO
<pre><code class="lang-bash">
curl -O https://bootstrap.pypa.io/get-pip.py
sudo python get-pip.py
</code></pre>
Now install the AWScli tools
<pre><code class="lang-bash">
pip install awscli
</code></pre>
NOTE: Currently there is a bug in El Capitan because it already has six-1.4.1 installed and AWS CLI wants to install &gt;=1.5 which causes another whole set of issues with Apple System Integration Protection. Still waiting for responses on the interwebs for a fix from apple.

I would recommend using the bundled version in El Captain until this gets sorted out.
<pre><code class="lang-bash">
curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
unzip awscli-bundle.zip
sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
</code></pre>
Now you can verify it is all working with
<pre><code class="lang-bash">
aws --version

aws-cli/1.8.11 Python/2.7.10 Darwin/15.0.0
</code></pre>
Now you will need to configure the CLI to allow for access to your account. You will need your accounts Access Key ID and Secret Access Key.
<pre><code class="lang-bash">
aws configure --profile yourprofilename
AWS Access Key ID [None]: YOURKEYGOESHERE
AWS Secret Access Key [None]: yoursecretkeygoeshere
Default region name [None]: us-east-1
Default output format [None]: json
</code></pre>
On mac this will create the following file for reference.
<pre><code class="lang-bash">
/Users/username/.aws/credentials
</code></pre>
Now verify you can pull data on your account.
<pre><code class="lang-bash">
aws ec2 describe-instances --profile yourprofilename
</code></pre>
You can change many of your call on the CLI as far as --profile --output and --regions.
<pre><code class="lang-bash">
aws ec2 describe-instances --profile yourprofilename --output table --region us-west-2
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>38</wp:post_id>
		<wp:post_date><![CDATA[2015-10-06 20:44:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-06 20:44:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[install-aws-cli-on-osx-el-capitan]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Install homebrew for Mac</title>
		<link>http://127.0.0.1/index.php/2015/10/08/install-homebrew-for-mac/</link>
		<pubDate>Thu, 08 Oct 2015 19:38:05 +0000</pubDate>
		<dc:creator><![CDATA[kbcaleb]]></dc:creator>
		<guid isPermaLink="false">http://ccollins.net/?p=393</guid>
		<description></description>
		<content:encoded><![CDATA[This one is really simple but people ask me how. So you can either visit http://brew.sh and follow the directions or just kick off this curl request.

<pre><code class="lang-bash">
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>393</wp:post_id>
		<wp:post_date><![CDATA[2015-10-08 13:38:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-08 19:38:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[install-homebrew-for-mac]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
